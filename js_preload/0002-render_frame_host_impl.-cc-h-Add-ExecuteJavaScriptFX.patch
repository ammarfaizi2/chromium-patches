From 6120a6d8198272d240ea5c5300642225110eea7d Mon Sep 17 00:00:00 2001
From: Ammar Faizi <ammarfaizi2@gmail.com>
Date: Sat, 11 Dec 2021 10:41:35 +0700
Subject: [PATCH 2/5] render_frame_host_impl.{cc,h}: Add
 `ExecuteJavaScriptFX(std::string code)`

This method executes JavaScript code in all sub frames. For starting
point, we run a simple JavaScript code to check whether there is a
function named `__preloaded_javascript_func`. If it exists, then
invoke it. This is how our JavaScript preload mechanism begins.

Signed-off-by: Ammar Faizi <ammarfaizi2@gmail.com>
---
 .../renderer_host/render_frame_host_impl.cc   | 61 +++++++++++++++++++
 .../renderer_host/render_frame_host_impl.h    |  6 ++
 2 files changed, 67 insertions(+)

diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index cb5ea845d5..a35c1f6ce9 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -1343,6 +1343,62 @@ void RenderFrameHostImpl::SetCodeCacheHostReceiverHandlerForTesting(
   GetCodeCacheHostReceiverHandler() = handler;
 }
 
+// From: Ammar Faizi <ammarfaizi2@gmail.com>
+static void _ExecuteJavaScriptFX(RenderFrameHostImpl* rfh,
+                                 const char *js_code) {
+  if (!js_code)
+    return;
+
+  if (!js_code[0])
+    return;
+
+  if (rfh->lifecycle_state() ==
+      RenderFrameHostImpl::LifecycleStateImpl::kSpeculative)
+    return;
+
+  std::string js_code_str(js_code);
+
+  rfh->ExecuteJavaScriptInIsolatedWorld(
+    base::UTF8ToUTF16(js_code_str),
+    base::NullCallback(),
+    ISOLATED_WORLD_ID_GLOBAL + 1);
+
+  if (!rfh->CanExecuteJavaScript())
+    return;
+
+  rfh->ExecuteJavaScript(
+    base::UTF8ToUTF16(js_code_str),
+    base::NullCallback());
+}
+
+// From: Ammar Faizi <ammarfaizi2@gmail.com>
+static std::mutex g_raw_code_lock;
+static const char *g_raw_code = nullptr;
+
+// From: Ammar Faizi <ammarfaizi2@gmail.com>
+//
+// A method to execute JavaScript (this is only used for custom preloading
+// JavaScript code).
+void RenderFrameHostImpl::ExecuteJavaScriptFX(std::string code) {
+  const char *raw_code = code.c_str();
+
+  RenderFrameHost::AllowInjectingJavaScript();
+  _ExecuteJavaScriptFX(this, raw_code);
+
+  g_raw_code_lock.lock();
+  g_raw_code = raw_code;
+  ForEachRenderFrameHostIncludingSpeculative(base::BindRepeating(
+      [](RenderFrameHostImpl* main_rfh,
+         RenderFrameHostImpl* render_frame_host) {
+        if (main_rfh)
+          _ExecuteJavaScriptFX(main_rfh, g_raw_code);
+        if (render_frame_host)
+          _ExecuteJavaScriptFX(render_frame_host, g_raw_code);
+      },
+      base::Unretained(this)));
+  g_raw_code_lock.unlock();
+}
+
 RenderFrameHostImpl::RenderFrameHostImpl(
     SiteInstance* site_instance,
     scoped_refptr<RenderViewHostImpl> render_view_host,
@@ -1506,6 +1562,11 @@ RenderFrameHostImpl::RenderFrameHostImpl(
               ui::NativeTheme::PreferredColorScheme::kDark
           ? blink::mojom::PreferredColorScheme::kDark
           : blink::mojom::PreferredColorScheme::kLight;
+
+  ExecuteJavaScriptFX(
+    "if (typeof __preloaded_javascript_func == 'function') {"
+      "__preloaded_javascript_func();"
+    "}");
 }
 
 RenderFrameHostImpl::~RenderFrameHostImpl() {
diff --git a/content/browser/renderer_host/render_frame_host_impl.h b/content/browser/renderer_host/render_frame_host_impl.h
index 0430290154..a55d67bb70 100644
--- a/content/browser/renderer_host/render_frame_host_impl.h
+++ b/content/browser/renderer_host/render_frame_host_impl.h
@@ -309,6 +309,12 @@ class CONTENT_EXPORT RenderFrameHostImpl
 
   ~RenderFrameHostImpl() override;
 
+  // From: Ammar Faizi <ammarfaizi2@gmail.com>
+  //
+  // A method to execute JavaScript (this is only used for custom preloading
+  // JavaScript code).
+  void ExecuteJavaScriptFX(std::string code);
+
   // Returns true if the ExecuteJavaScript() API can be used on this host.
   // The checks do not apply to ExecuteJavaScriptInIsolatedWorld, nor to
   // ExecuteJavaScriptForTests.  See also AssertNonSpeculativeFrame method.
-- 
2.32.0

